AWSTemplateFormatVersion: "2010-09-09"

Description: Todobackend Application

Parameters:
  ApplicationDesiredCount:
    Type: Number
    Description: Desired EC2 instance count

  ApplicationImageId:
    Type: String
    Description: ECS Amazon Machine Image (AMI) ID

  ApplicationImageTag:
    Type: String
    Default: latest
    Description: Application Docker Image Tag

  ApplicationSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Target subnets for EC2 instances

  DatabasePassword:
    Type: String
    Description: Database password
    NoEcho: "true"

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Target VPC

Resources:
  EcsTaskRunner:
    Type: AWS::Lambda::Function
    DependsOn:
      - EcsTaskRunnerLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ecsTasks
      Description: !Sub ${AWS::StackName} ECS Task Runner
      Handler: index.handler
      MemorySize: 128
      Runtime: python3.6
      Timeout: 300
      Role: !Sub ${EcsTaskRunnerRole.Arn}
      Code:
        ZipFile: |
          import cfnresponse
          import boto3

          client = boto3.client('ecs')

          def handler(event, context):
            try:
              print("Received event %s" % event)
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])
                return
              tasks = client.run_task(
                cluster=event['ResourceProperties']['Cluster'],
                taskDefinition=event['ResourceProperties']['TaskDefinition'],
                overrides=event['ResourceProperties'].get('Overrides', {}),
                count=1,
                startedBy=event['RequestId']
              )
              task = tasks['tasks'][0]['taskArn']
              print("Started ECS task %s" % task)
              waiter = client.get_waiter('tasks_stopped')
              waiter.wait(
                cluster=event['ResourceProperties']['Cluster'],
                tasks=[task],
              )
              result = client.describe_tasks(
                cluster=event['ResourceProperties']['Cluster'],
                tasks=[task]
              )
              exitCode = result['tasks'][0]['containers'][0]['exitCode']
              if exitCode > 0:
                print("ECS task %s failed with exit code %s" % (task, exitCode))
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, task)
              else:
                print("ECS task %s completed successfully" % task)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, task)
            except Exception as e:
                print("A failure occurred with exception %s" % e)
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
  ECSTaskRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EcsTaskRunnerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: EcsTasks
                Effect: Allow
                Action:
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RunTask
                Resource: "*"
                Condition:
                  ArnEquals:
                    ecs:cluster: !Sub ${ApplicationCluster.Arn}
              - Sid: ManageLambdaLogs
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub ${EcsTaskRunnerLogGroup.Arn}

  EcsTaskRunnerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ecsTasks
      RetentionInDays: 7

  MigrateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: todobackend-migrate
      ContainerDefinitions:
        - Name: migrate
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}
          MemoryReservation: 5
          Cpu: 5
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings_release
            - Name: MYSQL_HOST
              Value: !Sub ${ApplicationDatabase.Endpoint.Address}
            - Name: MYSQL_USER
              Value: todobackend
            - Name: MYSQL_PASSWORD
              Value: !Ref DatabasePassword
            - Name: MYSQL_DATABASE
              Value: todobackend
          Command:
            - python3
            - manage.py
            - migrate
            - --no-input
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: docker

  MigrateTask:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - ApplicationAutoscaling
      - ApplicationDatabase
    Properties:
      ServiceToken: !Sub ${EcsTaskRunner.Arn}
      Cluster: !Ref ApplicationCluster
      TaskDefinition: !Ref MigrateTaskDefinition

  ApplicationAutoscaling:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ApplicationDesiredCount
        Timeout: PT15M
    Properties:
      DesiredCapacity: !Ref ApplicationDesiredCount
      LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration
      MaxSize: 4
      MinSize: 0
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: !Sub "${AWS::StackName}-ApplicationAutoscaling-instance"
      VPCZoneIdentifier: !Ref ApplicationSubnets

  ApplicationAutoscalingInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: ApplicationAutoscalingInstanceRole

  ApplicationAutoscalingInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ECSContainerInstancePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:RegisterContainerInstance"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:UpdateContainerInstancesState"
                Resource: !Sub ${ApplicationCluster.Arn}
              - Effect: Allow
                Action:
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Submit*"
                  - "ecs:Poll"
                  - "ecs:StartTelemetrySession"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}*"

  ApplicationAutoscalingLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      "AWS::CloudFormation::Init":
        config:
          commands:
            "05_public_volume":
              command: mkdir -p /data/public
            "06_public_volume_permissions":
              command: "chown -R 1000:1000 /data/public"
            "10_first_run":
              command: sh firstrun.sh
              cwd: /home/ec2-user
              env:
                AUTOSCALING_GROUP: ApplicationAutoscaling
                AWS_DEFAULT_REGION: !Ref "AWS::Region"
                ECS_CLUSTER: !Ref ApplicationCluster
                STACK_NAME: !Ref "AWS::StackName"
    Properties:
      IamInstanceProfile: !Ref ApplicationAutoscalingInstanceProfile
      ImageId: !Ref ApplicationImageId
      InstanceType: t2.micro
      KeyName: admin
      SecurityGroups:
        - Ref: ApplicationAutoscalingSecurityGroup
      UserData: !Base64
        "Fn::Sub": "#!/bin/bash\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} \\\n  --resource ApplicationAutoscalingLaunchConfiguration \\\n  --region ${AWS::Region}\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \\\n  --resource ApplicationAutoscaling \\\n  --region ${AWS::Region}\n"

  ApplicationAutoscalingSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName} Application Autoscaling Security Group"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: udp
          ToPort: 22
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref VpcId

  ApplicationCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: todobackend-cluster

  ApplicationDatabase:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 10
      AvailabilityZone: !Sub "${AWS::Region}a"
      DBInstanceClass: db.t2.micro
      DBName: todobackend
      DBSubnetGroupName: !Ref ApplicationDatabaseSubnetGroup
      Engine: MySQL
      EngineVersion: 5.7
      MasterUserPassword: !Ref DatabasePassword
      MasterUsername: todobackend
      MultiAZ: "false"
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-db"
      VPCSecurityGroups:
        - Ref: ApplicationDatabaseSecurityGroup

  ApplicationDatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName} Application Database Security Group"
      SecurityGroupEgress:
        - CidrIp: "192.0.2.0/32"
          FromPort: -1
          IpProtocol: icmp
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-db-sg"
      VpcId: !Ref VpcId

  ApplicationDatabaseSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: Application Database Subnet Group
      SubnetIds: !Ref ApplicationSubnets
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-db-subnet-group"

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
      Scheme: internet-facing
      SecurityGroups:
        - Ref: ApplicationLoadBalancerSecurityGroup
      Subnets: !Ref ApplicationSubnets
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb"

  ApplicationLoadBalancerHttpListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationServiceTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Application Load Balancer Security Group
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb-sg"
      VpcId: !Ref VpcId

  ApplicationLoadBalancerToApplicationEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      DestinationSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup
      FromPort: 32768
      GroupId: !Ref ApplicationLoadBalancerSecurityGroup
      IpProtocol: tcp
      ToPort: 60999

  ApplicationLoadBalancerToApplicationIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: 32768
      GroupId: !Ref ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
      ToPort: 60999

  ApplicationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/ecs/todobackend"
      RetentionInDays: 7

  ApplicationService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - ApplicationAutoscaling
      - ApplicationLogGroup
      - ApplicationLoadBalancerHttpListener
      - MigrateTask
    Properties:
      Cluster: !Ref ApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref ApplicationDesiredCount
      LoadBalancers:
        - ContainerName: todobackend
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationServiceTargetGroup
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
      TaskDefinition: !Ref ApplicationTaskDefinition

  ApplicationServiceTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 8000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      VpcId: !Ref VpcId

  ApplicationTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: todobackend
          Command:
            - uwsgi
            - "--http=0.0.0.0:8000"
            - "--module=todobackend.wsgi"
            - "--master"
            - "--die-on-term"
            - "--processes=4"
            - "--threads=2"
            - "--check-static=/public"
          Cpu: 245
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings_release
            - Name: MYSQL_HOST
              Value: !Sub ${ApplicationDatabase.Endpoint.Address}
            - Name: MYSQL_USER
              Value: todobackend
            - Name: MYSQL_PASSWORD
              Value: !Ref DatabasePassword
            - Name: MYSQL_DATABASE
              Value: todobackend
            - Name: SECRET_KEY
              Value: some-random-secret-should-be-here
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/todobackend"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: docker
          MemoryReservation: 395
          MountPoints:
            - ContainerPath: /public
              SourceVolume: public
          PortMappings:
            - ContainerPort: 8000
              HostPort: 0
        - Name: collectstatic
          Command:
            - python3
            - manage.py
            - collectstatic
            - "--no-input"
          Cpu: 5
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings_release
          Essential: false
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/todobackend"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: docker
          MemoryReservation: 5
          MountPoints:
            - ContainerPath: /public
              SourceVolume: public
      Family: todobackend
      Volumes:
        - Name: public
          Host:
            SourcePath: /data/public

  ApplicationToApplicationDatabaseEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      DestinationSecurityGroupId: !Ref ApplicationDatabaseSecurityGroup
      FromPort: 3306
      GroupId: !Ref ApplicationAutoscalingSecurityGroup
      IpProtocol: tcp
      ToPort: 3306

  ApplicationToApplicationDatabaseIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: 3306
      GroupId: !Ref ApplicationDatabaseSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup
      ToPort: 3306

Outputs:
  PublicURL:
    Description: Public DNS name of Application Load Balancer
    Value: !Sub ${ApplicationLoadBalancer.DNSName}
