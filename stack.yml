AWSTemplateFormatVersion: "2010-09-09"

Description: Todobackend Application

Parameters:
  ApplicationDesiredCount:
    Type: Number
    Description: Desired EC2 instance count

  ApplicationImageId:
    Type: String
    Description: ECS Amazon Machine Image (AMI) ID

  ApplicationSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Target subnets for EC2 instances

  DatabasePassword:
    Type: String
    Description: Database password
    NoEcho: "true"

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Target VPC

Resources:
  ApplicationDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: MySQL
      EngineVersion: 5.7
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 10
      StorageType: gp2
      MasterUsername: todobackend
      MasterUserPassword: !Ref DatabasePassword
      DBName: todobackend
      VPCSecurityGroups:
        - !Ref ApplicationDatabaseSecurityGroup
      DBSubnetGroupName: !Ref ApplicationDatabaseSubnetGroup
      MultiAZ: "false"
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db
  ApplicationDatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
        DBSubnetGroupDescription: Application Database Subnet Group
        SubnetIds: !Ref ApplicationSubnets
        Tags:
          - Key: Name
            Value: !Sub ${AWS::StackName}-db-subnet-group
  ApplicationDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} Application Database Security Group
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 192.0.2.0/32
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-sg
  ApplicationToApplicationDatabaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref ApplicationDatabaseSecurityGroup
      SourceSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup
  ApplicationToApplicationDatabaseEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        GroupId: !Ref ApplicationAutoscalingSecurityGroup
        DestinationSecurityGroupId: !Ref ApplicationDatabaseSecurityGroup
  ApplicationAutoscaling:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ApplicationDesiredCount
        Timeout: PT15M
    Properties:
      DesiredCapacity: !Ref ApplicationDesiredCount
      LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration
      MaxSize: 4
      MinSize: 0
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: !Sub "${AWS::StackName}-ApplicationAutoscaling-instance"
      VPCZoneIdentifier: !Ref ApplicationSubnets

  ApplicationAutoscalingInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: ApplicationAutoscalingInstanceRole

  ApplicationAutoscalingInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ECSContainerInstancePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:RegisterContainerInstance"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:UpdateContainerInstancesState"
                Resource: !Sub ${ApplicationCluster.Arn}
              - Effect: Allow
                Action:
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Submit*"
                  - "ecs:Poll"
                  - "ecs:StartTelemetrySession"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}*"

  ApplicationAutoscalingLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      "AWS::CloudFormation::Init":
        config:
          commands:
            "05_public_volume":
              command: mkdir -p /data/public
            "06_public_volume_permissions":
              command: "chown -R 1000:1000 /data/public"
            "10_first_run":
              command: sh firstrun.sh
              cwd: /home/ec2-user
              env:
                AUTOSCALING_GROUP: ApplicationAutoscaling
                AWS_DEFAULT_REGION: !Ref "AWS::Region"
                ECS_CLUSTER: !Ref ApplicationCluster
                STACK_NAME: !Ref "AWS::StackName"
    Properties:
      IamInstanceProfile: !Ref ApplicationAutoscalingInstanceProfile
      ImageId: !Ref ApplicationImageId
      InstanceType: t2.micro
      KeyName: admin
      SecurityGroups:
        - Ref: ApplicationAutoscalingSecurityGroup
      UserData: !Base64
        "Fn::Sub": "#!/bin/bash\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} \\\n  --resource ApplicationAutoscalingLaunchConfiguration \\\n  --region ${AWS::Region}\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \\\n  --resource ApplicationAutoscaling \\\n  --region ${AWS::Region}\n"

  ApplicationAutoscalingSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName} Application Autoscaling Security Group"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: udp
          ToPort: 22
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref VpcId

  ApplicationCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: todobackend-cluster
